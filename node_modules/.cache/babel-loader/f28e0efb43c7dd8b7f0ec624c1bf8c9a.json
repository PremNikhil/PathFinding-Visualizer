{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/premnikhil/Desktop/project/Path_Finder/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node/Node.jsx\";\nimport { showPopUp } from \"./Tutorial/Tutorial.jsx\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\nimport \"./PathfindingVisualizer.css\"; // Defining initial state of start and finish.\n\nlet row_max_length = 20;\nlet col_max_length = 40;\nlet START_NODE_ROW = 9;\nlet START_NODE_COL = 8;\nlet FINISH_NODE_ROW = 9;\nlet FINISH_NODE_COL = 31;\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.weightChangeHandler = event => {\n      this.setState({\n        weight: event.target.value\n      });\n    };\n\n    this.pointChangeHandler = () => {\n      if (this.notCorrect()) return; //To check if the provided value is suitable or not.\n\n      document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`).className = \"node\";\n      document.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`).className = \"node\";\n      START_NODE_ROW = parseInt(document.getElementById(\"start_row\").value);\n      START_NODE_COL = parseInt(document.getElementById(\"start_col\").value);\n      FINISH_NODE_ROW = parseInt(document.getElementById(\"end_row\").value);\n      FINISH_NODE_COL = parseInt(document.getElementById(\"end_col\").value);\n      document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`).className = \"node node-start\";\n      document.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`).className = \"node node-finish\";\n    };\n\n    this.notCorrect = () => {\n      if (isNaN(parseInt(document.getElementById(\"start_row\").value)) || isNaN(parseInt(document.getElementById(\"start_col\").value)) || isNaN(parseInt(document.getElementById(\"end_row\").value)) || isNaN(parseInt(document.getElementById(\"end_col\").value))) return true;\n      if (parseInt(document.getElementById(\"start_row\").value) > row_max_length || parseInt(document.getElementById(\"start_col\").value) > col_max_length) return true;\n      if (parseInt(document.getElementById(\"start_row\").value) < 0 || parseInt(document.getElementById(\"start_col\").value) < 0) return true;\n      if (parseInt(document.getElementById(\"end_row\").value) > row_max_length || parseInt(document.getElementById(\"end_col\").value) > col_max_length) return true;\n      if (parseInt(document.getElementById(\"end_row\").value) < 0 || parseInt(document.getElementById(\"end_col\").value) < 0) return true;\n      return false;\n    };\n\n    this.toggleWeight = () => {\n      const temp = this.state.changeWeight;\n      this.setState({\n        changeWeight: !temp\n      });\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      topMessage: \"Dijkstra Algorithm\",\n      weight: 1,\n      changeWeight: false,\n      distanceToBeTraveled: 0\n    };\n  } // Creating grid\n\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  } // On pressing the mouse down\n\n\n  handleMouseDown(row, col) {\n    if (this.state.topMessage !== \"Dijkstra Algorithm\") return;\n    let newGrid = [];\n\n    if (this.state.changeWeight) {\n      newGrid = getNewGridWithWeightToggled(this.state.grid, row, col, this.state.weight);\n    } else {\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    }\n\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  } // On entering the new node element.\n\n\n  handleMouseEnter(row, col) {\n    if (this.state.topMessage !== \"Dijkstra Algorithm\") return;\n    if (!this.state.mouseIsPressed) return;\n    let newGrid = [];\n\n    if (this.state.changeWeight) {\n      newGrid = getNewGridWithWeightToggled(this.state.grid, row, col, this.state.weight);\n    } else {\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    }\n\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  } // When we release the mouse\n\n\n  handleMouseUp() {\n    if (this.state.topMessage !== \"Dijkstra Algorithm\") return;\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  visualizeDijkstra() {\n    this.setState({\n      topMessage: \"Creator : Suhaan\"\n    });\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      // When we reach the last element in visitedNodesInOrder.\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.setState({\n            topMessage: \"Shortest Path\"\n          });\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      if (i === visitedNodesInOrder.length - 1) continue;\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        if (node.isWeight) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visitedWeight\";\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n        }\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    let timeTaken = 0;\n\n    for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n\n        if (nodesInShortestPathOrder[i].isWeight) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-path-weight\";\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-path\";\n        }\n      }, 50 * i);\n    }\n\n    timeTaken = nodesInShortestPathOrder[nodesInShortestPathOrder.length - 1].distance;\n    this.setState({\n      distanceToBeTraveled: timeTaken\n    });\n  } // onClick={() => this.resetGrid()}\n  // resetGrid() {\n  //   const newGrid = getInitialGrid();\n  //   START_NODE_ROW = 0;\n  //   START_NODE_COL = 0;\n  //   FINISH_NODE_ROW = row_max_length - 1;\n  //   FINISH_NODE_COL = col_max_length - 1;\n  //   document.getElementById(\"start_row\").value = START_NODE_ROW;\n  //   document.getElementById(\"start_col\").value = START_NODE_COL;\n  //   document.getElementById(\"end_row\").value = FINISH_NODE_ROW;\n  //   document.getElementById(\"end_col\").value = FINISH_NODE_COL;\n  //   for (let row = 0; row < row_max_length; row++) {\n  //     for (let col = 0; col < col_max_length; col++) {\n  //       if (row === START_NODE_ROW && col === START_NODE_COL) {\n  //         document.getElementById(`node-${row}-${col}`).className =\n  //           \"node node-start\";\n  //       } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\n  //         document.getElementById(`node-${row}-${col}`).className =\n  //           \"node node-finish\";\n  //       } else {\n  //         document.getElementById(`node-${row}-${col}`).className = \"node\";\n  //       }\n  //     }\n  //   }\n  //   this.setState({ topMessage: \"Dijkstra Algorithm\" });\n  //   this.setState({ grid: newGrid });\n  // }\n\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed,\n      topMessage,\n      distanceToBeTraveled\n    } = this.state;\n\n    let button_task = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"btn\",\n      onClick: () => this.visualizeDijkstra(),\n      children: \"Start Dijkstra Algorithm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this);\n\n    if (topMessage === \"Shortest Path\") {\n      button_task = /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"btn\",\n        href: \"#\",\n        onClick: () => window.location.reload(false),\n        children: [\"Reset \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }, this), \"Time : \", distanceToBeTraveled, /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \" [1 Block = 1 Time = 1 Weight]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this);\n    } else if (topMessage === \"Creator : Suhaan\") {\n      button_task = /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"running\",\n        children: \"Running...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 21\n      }, this);\n    }\n\n    let changeWeightText = \"False\";\n    if (this.state.changeWeight) changeWeightText = \"True\";\n\n    let textBox = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weightContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"quantity\",\n          children: \"Toggle or Set Weight \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"quantity\",\n          name: \"quantity\",\n          min: \"1\",\n          max: \"5\",\n          onChange: this.weightChangeHandler,\n          defaultValue: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.toggleWeight,\n          children: changeWeightText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"startPointContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"point\",\n          children: \"Start Point :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"point\",\n          id: \"start_row\",\n          min: \"0\",\n          max: row_max_length - 1,\n          onChange: this.pointChangeHandler,\n          defaultValue: \"9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"point\",\n          id: \"start_col\",\n          min: \"0\",\n          max: col_max_length - 1,\n          onChange: this.pointChangeHandler,\n          defaultValue: \"8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"endPointContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"point\",\n          children: \"End Point :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"point\",\n          id: \"end_row\",\n          min: \"0\",\n          max: row_max_length - 1,\n          onChange: this.pointChangeHandler,\n          defaultValue: \"9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"point\",\n          id: \"end_col\",\n          min: \"0\",\n          max: col_max_length - 1,\n          onChange: this.pointChangeHandler,\n          defaultValue: \"31\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonContainer\",\n        children: button_task\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this);\n\n    if (topMessage === \"Creator : Suhaan\") {\n      textBox = null;\n    } else if (topMessage === \"Shortest Path\") {\n      textBox = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonContainer\",\n        style: {\n          width: \"30%\",\n          margin: \"0 auto\"\n        },\n        children: button_task\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pathfindingVisualizer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"heading\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            onClick: showPopUp,\n            children: \"Search Visualizer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: topMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), textBox, /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Dijkstra's Algorithm is weighted and guarantees the shortest path!\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ref\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualGridContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gridBox\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"grid\",\n            style: {\n              borderSpacing: \"0\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: grid.map((row, rowIndex) => {\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: row.map((node, nodeIndex) => {\n                    const {\n                      isStart,\n                      isFinish,\n                      isWall,\n                      isWeight\n                    } = node; //Extracting from the node\n\n                    return /*#__PURE__*/_jsxDEV(Node, {\n                      row: rowIndex,\n                      col: nodeIndex,\n                      isStart: isStart,\n                      isFinish: isFinish,\n                      isWall: isWall,\n                      isWeight: isWeight,\n                      mouseIsPressed: mouseIsPressed,\n                      onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                      onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                      onMouseUp: () => this.handleMouseUp()\n                    }, rowIndex + \"-\" + nodeIndex, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 379,\n                      columnNumber: 27\n                    }, this);\n                  })\n                }, rowIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < row_max_length; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < col_max_length; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    isWeight: false,\n    previousNode: null,\n    weight: 0\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = [...grid];\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    // copying other properties of the node\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithWeightToggled = (grid, row, col, weight) => {\n  const newGrid = [...grid];\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    // copying other properties of the node\n    isWeight: !node.isWeight,\n    weight: parseInt(weight)\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/premnikhil/Desktop/project/Path_Finder/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","showPopUp","dijkstra","getNodesInShortestPathOrder","row_max_length","col_max_length","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","props","weightChangeHandler","event","setState","weight","target","value","pointChangeHandler","notCorrect","document","getElementById","className","parseInt","isNaN","toggleWeight","temp","state","changeWeight","grid","mouseIsPressed","topMessage","distanceToBeTraveled","componentDidMount","getInitialGrid","handleMouseDown","row","col","newGrid","getNewGridWithWeightToggled","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","visualizeDijkstra","startNode","finishNode","visitedNodesInOrder","nodesInShortestPathOrder","animateDijkstra","i","length","setTimeout","animateShortestPath","node","isWeight","timeTaken","distance","render","button_task","window","location","reload","changeWeightText","textBox","width","margin","borderSpacing","map","rowIndex","nodeIndex","isStart","isFinish","isWall","currentRow","push","createNode","Infinity","isVisited","previousNode","newNode"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,SAAQC,SAAR,QAAwB,yBAAxB;AAEA,SAASC,QAAT,EAAmBC,2BAAnB,QAAsD,wBAAtD;AAEA,OAAO,6BAAP,C,CAEA;;AAEA,IAAIC,cAAc,GAAG,EAArB;AACA,IAAIC,cAAc,GAAG,EAArB;AAEA,IAAIC,cAAc,GAAG,CAArB;AACA,IAAIC,cAAc,GAAG,CAArB;AACA,IAAIC,eAAe,GAAG,CAAtB;AACA,IAAIC,eAAe,GAAG,EAAtB;AAEA,eAAe,MAAMC,qBAAN,SAAoCX,SAApC,CAA8C;AAC3DY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAyJnBC,mBAzJmB,GAyJIC,KAAD,IAAW;AAC/B,WAAKC,QAAL,CAAc;AAAEC,QAAAA,MAAM,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAAvB,OAAd;AACD,KA3JkB;;AAAA,SA6JnBC,kBA7JmB,GA6JE,MAAM;AACzB,UAAI,KAAKC,UAAL,EAAJ,EAAuB,OADE,CACM;;AAE/BC,MAAAA,QAAQ,CAACC,cAAT,CACG,QAAOhB,cAAe,IAAGC,cAAe,EAD3C,EAEEgB,SAFF,GAEc,MAFd;AAGAF,MAAAA,QAAQ,CAACC,cAAT,CACG,QAAOd,eAAgB,IAAGC,eAAgB,EAD7C,EAEEc,SAFF,GAEc,MAFd;AAIAjB,MAAAA,cAAc,GAAGkB,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCJ,KAAtC,CAAzB;AACAX,MAAAA,cAAc,GAAGiB,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCJ,KAAtC,CAAzB;AACAV,MAAAA,eAAe,GAAGgB,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCJ,KAApC,CAA1B;AACAT,MAAAA,eAAe,GAAGe,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCJ,KAApC,CAA1B;AAEAG,MAAAA,QAAQ,CAACC,cAAT,CACG,QAAOhB,cAAe,IAAGC,cAAe,EAD3C,EAEEgB,SAFF,GAEc,iBAFd;AAGAF,MAAAA,QAAQ,CAACC,cAAT,CACG,QAAOd,eAAgB,IAAGC,eAAgB,EAD7C,EAEEc,SAFF,GAEc,kBAFd;AAGD,KAlLkB;;AAAA,SAoLnBH,UApLmB,GAoLN,MAAM;AACjB,UACEK,KAAK,CAACD,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCJ,KAAtC,CAAT,CAAL,IACAO,KAAK,CAACD,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCJ,KAAtC,CAAT,CADL,IAEAO,KAAK,CAACD,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCJ,KAApC,CAAT,CAFL,IAGAO,KAAK,CAACD,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCJ,KAApC,CAAT,CAJP,EAME,OAAO,IAAP;AAEF,UACEM,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCJ,KAAtC,CAAR,GAAuDd,cAAvD,IACAoB,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCJ,KAAtC,CAAR,GAAuDb,cAFzD,EAIE,OAAO,IAAP;AACF,UACEmB,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCJ,KAAtC,CAAR,GAAuD,CAAvD,IACAM,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCJ,KAAtC,CAAR,GAAuD,CAFzD,EAIE,OAAO,IAAP;AAEF,UACEM,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCJ,KAApC,CAAR,GAAqDd,cAArD,IACAoB,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCJ,KAApC,CAAR,GAAqDb,cAFvD,EAIE,OAAO,IAAP;AACF,UACEmB,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCJ,KAApC,CAAR,GAAqD,CAArD,IACAM,QAAQ,CAACH,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCJ,KAApC,CAAR,GAAqD,CAFvD,EAIE,OAAO,IAAP;AAEF,aAAO,KAAP;AACD,KApNkB;;AAAA,SAsNnBQ,YAtNmB,GAsNJ,MAAM;AACnB,YAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,YAAxB;AACA,WAAKd,QAAL,CAAc;AAAEc,QAAAA,YAAY,EAAE,CAACF;AAAjB,OAAd;AACD,KAzNkB;;AAEjB,SAAKC,KAAL,GAAa;AACXE,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,cAAc,EAAE,KAFL;AAGXC,MAAAA,UAAU,EAAE,oBAHD;AAIXhB,MAAAA,MAAM,EAAE,CAJG;AAKXa,MAAAA,YAAY,EAAE,KALH;AAMXI,MAAAA,oBAAoB,EAAE;AANX,KAAb;AAQD,GAX0D,CAa3D;;;AACAC,EAAAA,iBAAiB,GAAG;AAClB,UAAMJ,IAAI,GAAGK,cAAc,EAA3B;AACA,SAAKpB,QAAL,CAAc;AAAEe,MAAAA;AAAF,KAAd;AACD,GAjB0D,CAmB3D;;;AACAM,EAAAA,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAW;AACxB,QAAI,KAAKV,KAAL,CAAWI,UAAX,KAA0B,oBAA9B,EAAoD;AAEpD,QAAIO,OAAO,GAAG,EAAd;;AAEA,QAAI,KAAKX,KAAL,CAAWC,YAAf,EAA6B;AAC3BU,MAAAA,OAAO,GAAGC,2BAA2B,CACnC,KAAKZ,KAAL,CAAWE,IADwB,EAEnCO,GAFmC,EAGnCC,GAHmC,EAInC,KAAKV,KAAL,CAAWZ,MAJwB,CAArC;AAMD,KAPD,MAOO;AACLuB,MAAAA,OAAO,GAAGE,yBAAyB,CAAC,KAAKb,KAAL,CAAWE,IAAZ,EAAkBO,GAAlB,EAAuBC,GAAvB,CAAnC;AACD;;AAED,SAAKvB,QAAL,CAAc;AAAEe,MAAAA,IAAI,EAAES,OAAR;AAAiBR,MAAAA,cAAc,EAAE;AAAjC,KAAd;AACD,GArC0D,CAuC3D;;;AACAW,EAAAA,gBAAgB,CAACL,GAAD,EAAMC,GAAN,EAAW;AACzB,QAAI,KAAKV,KAAL,CAAWI,UAAX,KAA0B,oBAA9B,EAAoD;AACpD,QAAI,CAAC,KAAKJ,KAAL,CAAWG,cAAhB,EAAgC;AAEhC,QAAIQ,OAAO,GAAG,EAAd;;AAEA,QAAI,KAAKX,KAAL,CAAWC,YAAf,EAA6B;AAC3BU,MAAAA,OAAO,GAAGC,2BAA2B,CACnC,KAAKZ,KAAL,CAAWE,IADwB,EAEnCO,GAFmC,EAGnCC,GAHmC,EAInC,KAAKV,KAAL,CAAWZ,MAJwB,CAArC;AAMD,KAPD,MAOO;AACLuB,MAAAA,OAAO,GAAGE,yBAAyB,CAAC,KAAKb,KAAL,CAAWE,IAAZ,EAAkBO,GAAlB,EAAuBC,GAAvB,CAAnC;AACD;;AAED,SAAKvB,QAAL,CAAc;AAAEe,MAAAA,IAAI,EAAES,OAAR;AAAiBR,MAAAA,cAAc,EAAE;AAAjC,KAAd;AACD,GA1D0D,CA4D3D;;;AACAY,EAAAA,aAAa,GAAG;AACd,QAAI,KAAKf,KAAL,CAAWI,UAAX,KAA0B,oBAA9B,EAAoD;AACpD,SAAKjB,QAAL,CAAc;AAAEgB,MAAAA,cAAc,EAAE;AAAlB,KAAd;AACD;;AAEDa,EAAAA,iBAAiB,GAAG;AAClB,SAAK7B,QAAL,CAAc;AAAEiB,MAAAA,UAAU,EAAE;AAAd,KAAd;AACA,UAAM;AAAEF,MAAAA;AAAF,QAAW,KAAKF,KAAtB;AACA,UAAMiB,SAAS,GAAGf,IAAI,CAACxB,cAAD,CAAJ,CAAqBC,cAArB,CAAlB;AACA,UAAMuC,UAAU,GAAGhB,IAAI,CAACtB,eAAD,CAAJ,CAAsBC,eAAtB,CAAnB;AACA,UAAMsC,mBAAmB,GAAG7C,QAAQ,CAAC4B,IAAD,EAAOe,SAAP,EAAkBC,UAAlB,CAApC;AACA,UAAME,wBAAwB,GAAG7C,2BAA2B,CAAC2C,UAAD,CAA5D;AACA,SAAKG,eAAL,CAAqBF,mBAArB,EAA0CC,wBAA1C;AACD;;AAEDC,EAAAA,eAAe,CAACF,mBAAD,EAAsBC,wBAAtB,EAAgD;AAC7D,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIH,mBAAmB,CAACI,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AACpD;AACA,UAAIA,CAAC,KAAKH,mBAAmB,CAACI,MAA9B,EAAsC;AACpCC,QAAAA,UAAU,CAAC,MAAM;AACf,eAAKrC,QAAL,CAAc;AAAEiB,YAAAA,UAAU,EAAE;AAAd,WAAd;AACA,eAAKqB,mBAAL,CAAyBL,wBAAzB;AACD,SAHS,EAGP,KAAKE,CAHE,CAAV;AAIA;AACD;;AAED,UAAIA,CAAC,KAAKH,mBAAmB,CAACI,MAApB,GAA6B,CAAvC,EAA0C;AAC1CC,MAAAA,UAAU,CAAC,MAAM;AACf,cAAME,IAAI,GAAGP,mBAAmB,CAACG,CAAD,CAAhC;;AACA,YAAII,IAAI,CAACC,QAAT,EAAmB;AACjBlC,UAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOgC,IAAI,CAACjB,GAAI,IAAGiB,IAAI,CAAChB,GAAI,EAArD,EAAwDf,SAAxD,GACE,yBADF;AAED,SAHD,MAGO;AACLF,UAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOgC,IAAI,CAACjB,GAAI,IAAGiB,IAAI,CAAChB,GAAI,EAArD,EAAwDf,SAAxD,GACE,mBADF;AAED;AACF,OATS,EASP,KAAK2B,CATE,CAAV;AAUD;AACF;;AAEDG,EAAAA,mBAAmB,CAACL,wBAAD,EAA2B;AAC5C,QAAIQ,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,wBAAwB,CAACG,MAAzB,GAAkC,CAAtD,EAAyDD,CAAC,EAA1D,EAA8D;AAC5DE,MAAAA,UAAU,CAAC,MAAM;AACf,cAAME,IAAI,GAAGN,wBAAwB,CAACE,CAAD,CAArC;;AACA,YAAIF,wBAAwB,CAACE,CAAD,CAAxB,CAA4BK,QAAhC,EAA0C;AACxClC,UAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOgC,IAAI,CAACjB,GAAI,IAAGiB,IAAI,CAAChB,GAAI,EAArD,EAAwDf,SAAxD,GACE,uBADF;AAED,SAHD,MAGO;AACLF,UAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOgC,IAAI,CAACjB,GAAI,IAAGiB,IAAI,CAAChB,GAAI,EAArD,EAAwDf,SAAxD,GACE,gBADF;AAED;AACF,OATS,EASP,KAAK2B,CATE,CAAV;AAUD;;AAEDM,IAAAA,SAAS,GACPR,wBAAwB,CAACA,wBAAwB,CAACG,MAAzB,GAAkC,CAAnC,CAAxB,CAA8DM,QADhE;AAEA,SAAK1C,QAAL,CAAc;AAAEkB,MAAAA,oBAAoB,EAAEuB;AAAxB,KAAd;AACD,GAvH0D,CAyH3D;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAoEAE,EAAAA,MAAM,GAAG;AACP,UAAM;AACJ5B,MAAAA,IADI;AAEJC,MAAAA,cAFI;AAGJC,MAAAA,UAHI;AAIJC,MAAAA;AAJI,QAKF,KAAKL,KALT;;AAMA,QAAI+B,WAAW,gBACb;AAAG,MAAA,SAAS,EAAC,KAAb;AAAmB,MAAA,OAAO,EAAE,MAAM,KAAKf,iBAAL,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;;AAMA,QAAIZ,UAAU,KAAK,eAAnB,EAAoC;AAClC2B,MAAAA,WAAW,gBACT;AACE,QAAA,SAAS,EAAC,KADZ;AAEE,QAAA,IAAI,EAAC,GAFP;AAGE,QAAA,OAAO,EAAE,MAAMC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB,CAHjB;AAAA,0CAKQ;AAAA;AAAA;AAAA;AAAA,gBALR,aAMU7B,oBANV,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAWD,KAZD,MAYO,IAAID,UAAU,KAAK,kBAAnB,EAAuC;AAC5C2B,MAAAA,WAAW,gBAAG;AAAI,QAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAd;AACD;;AAED,QAAII,gBAAgB,GAAG,OAAvB;AAEA,QAAI,KAAKnC,KAAL,CAAWC,YAAf,EAA6BkC,gBAAgB,GAAG,MAAnB;;AAE7B,QAAIC,OAAO,gBACT;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAGE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,EAAE,EAAC,UAFL;AAGE,UAAA,IAAI,EAAC,UAHP;AAIE,UAAA,GAAG,EAAC,GAJN;AAKE,UAAA,GAAG,EAAC,GALN;AAME,UAAA,QAAQ,EAAE,KAAKnD,mBANjB;AAOE,UAAA,YAAY,EAAC;AAPf;AAAA;AAAA;AAAA;AAAA,gBAHF,eAaE;AAAQ,UAAA,OAAO,EAAE,KAAKa,YAAtB;AAAA,oBAAqCqC;AAArC;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAiBE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,EAAE,EAAC,WAHL;AAIE,UAAA,GAAG,EAAC,GAJN;AAKE,UAAA,GAAG,EAAE3D,cAAc,GAAG,CALxB;AAME,UAAA,QAAQ,EAAE,KAAKe,kBANjB;AAOE,UAAA,YAAY,EAAC;AAPf;AAAA;AAAA;AAAA;AAAA,gBAFF,eAWE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,EAAE,EAAC,WAHL;AAIE,UAAA,GAAG,EAAC,GAJN;AAKE,UAAA,GAAG,EAAEd,cAAc,GAAG,CALxB;AAME,UAAA,QAAQ,EAAE,KAAKc,kBANjB;AAOE,UAAA,YAAY,EAAC;AAPf;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF,eAuCE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,EAAE,EAAC,SAHL;AAIE,UAAA,GAAG,EAAC,GAJN;AAKE,UAAA,GAAG,EAAEf,cAAc,GAAG,CALxB;AAME,UAAA,QAAQ,EAAE,KAAKe,kBANjB;AAOE,UAAA,YAAY,EAAC;AAPf;AAAA;AAAA;AAAA;AAAA,gBAFF,eAWE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,EAAE,EAAC,SAHL;AAIE,UAAA,GAAG,EAAC,GAJN;AAKE,UAAA,GAAG,EAAEd,cAAc,GAAG,CALxB;AAME,UAAA,QAAQ,EAAE,KAAKc,kBANjB;AAOE,UAAA,YAAY,EAAC;AAPf;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cAvCF,eA6DE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,kBAAkCwC;AAAlC;AAAA;AAAA;AAAA;AAAA,cA7DF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;;AAkEA,QAAI3B,UAAU,KAAK,kBAAnB,EAAuC;AACrCgC,MAAAA,OAAO,GAAG,IAAV;AACD,KAFD,MAEO,IAAIhC,UAAU,KAAK,eAAnB,EAAoC;AACzCgC,MAAAA,OAAO,gBACL;AACE,QAAA,SAAS,EAAC,iBADZ;AAEE,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE,KAAT;AAAgBC,UAAAA,MAAM,EAAE;AAAxB,SAFT;AAAA,kBAIGP;AAJH;AAAA;AAAA;AAAA;AAAA,cADF;AAQD;;AAED,wBACE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,kCACE;AAAI,YAAA,OAAO,EAAE1D,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAK+B;AAAL;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAOGgC,OAPH,eASE;AAAA,2FACqE,GADrE,eAEE;AAAM,YAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAgBE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,iCACE;AAAO,YAAA,SAAS,EAAC,MAAjB;AAAwB,YAAA,KAAK,EAAE;AAAEG,cAAAA,aAAa,EAAE;AAAjB,aAA/B;AAAA,mCACE;AAAA,wBACGrC,IAAI,CAACsC,GAAL,CAAS,CAAC/B,GAAD,EAAMgC,QAAN,KAAmB;AAC3B,oCACE;AAAA,4BACGhC,GAAG,CAAC+B,GAAJ,CAAQ,CAACd,IAAD,EAAOgB,SAAP,KAAqB;AAC5B,0BAAM;AAAEC,sBAAAA,OAAF;AAAWC,sBAAAA,QAAX;AAAqBC,sBAAAA,MAArB;AAA6BlB,sBAAAA;AAA7B,wBAA0CD,IAAhD,CAD4B,CAC0B;;AACtD,wCACE,QAAC,IAAD;AACE,sBAAA,GAAG,EAAEe,QADP;AAEE,sBAAA,GAAG,EAAEC,SAFP;AAIE,sBAAA,OAAO,EAAEC,OAJX;AAKE,sBAAA,QAAQ,EAAEC,QALZ;AAME,sBAAA,MAAM,EAAEC,MANV;AAOE,sBAAA,QAAQ,EAAElB,QAPZ;AAQE,sBAAA,cAAc,EAAExB,cARlB;AASE,sBAAA,WAAW,EAAE,CAACM,GAAD,EAAMC,GAAN,KACX,KAAKF,eAAL,CAAqBC,GAArB,EAA0BC,GAA1B,CAVJ;AAYE,sBAAA,YAAY,EAAE,CAACD,GAAD,EAAMC,GAAN,KACZ,KAAKI,gBAAL,CAAsBL,GAAtB,EAA2BC,GAA3B,CAbJ;AAeE,sBAAA,SAAS,EAAE,MAAM,KAAKK,aAAL;AAfnB,uBAGO0B,QAAQ,GAAG,GAAX,GAAiBC,SAHxB;AAAA;AAAA;AAAA;AAAA,4BADF;AAmBD,mBArBA;AADH,mBAASD,QAAT;AAAA;AAAA;AAAA;AAAA,wBADF;AA0BD,eA3BA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAuDD;;AAnY0D;;AAsY7D,MAAMlC,cAAc,GAAG,MAAM;AAC3B,QAAML,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIO,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGjC,cAAxB,EAAwCiC,GAAG,EAA3C,EAA+C;AAC7C,UAAMqC,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAIpC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGjC,cAAxB,EAAwCiC,GAAG,EAA3C,EAA+C;AAC7CoC,MAAAA,UAAU,CAACC,IAAX,CAAgBC,UAAU,CAACtC,GAAD,EAAMD,GAAN,CAA1B;AACD;;AACDP,IAAAA,IAAI,CAAC6C,IAAL,CAAUD,UAAV;AACD;;AACD,SAAO5C,IAAP;AACD,CAVD;;AAYA,MAAM8C,UAAU,GAAG,CAACtC,GAAD,EAAMD,GAAN,KAAc;AAC/B,SAAO;AACLC,IAAAA,GADK;AAELD,IAAAA,GAFK;AAGLkC,IAAAA,OAAO,EAAElC,GAAG,KAAK/B,cAAR,IAA0BgC,GAAG,KAAK/B,cAHtC;AAILiE,IAAAA,QAAQ,EAAEnC,GAAG,KAAK7B,eAAR,IAA2B8B,GAAG,KAAK7B,eAJxC;AAKLgD,IAAAA,QAAQ,EAAEoB,QALL;AAMLC,IAAAA,SAAS,EAAE,KANN;AAOLL,IAAAA,MAAM,EAAE,KAPH;AAQLlB,IAAAA,QAAQ,EAAE,KARL;AASLwB,IAAAA,YAAY,EAAE,IATT;AAUL/D,IAAAA,MAAM,EAAE;AAVH,GAAP;AAYD,CAbD;;AAeA,MAAMyB,yBAAyB,GAAG,CAACX,IAAD,EAAOO,GAAP,EAAYC,GAAZ,KAAoB;AACpD,QAAMC,OAAO,GAAG,CAAC,GAAGT,IAAJ,CAAhB;AACA,QAAMwB,IAAI,GAAGf,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAb;AACA,QAAM0C,OAAO,GAAG,EACd,GAAG1B,IADW;AACL;AACTmB,IAAAA,MAAM,EAAE,CAACnB,IAAI,CAACmB;AAFA,GAAhB;AAIAlC,EAAAA,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoB0C,OAApB;AACA,SAAOzC,OAAP;AACD,CATD;;AAWA,MAAMC,2BAA2B,GAAG,CAACV,IAAD,EAAOO,GAAP,EAAYC,GAAZ,EAAiBtB,MAAjB,KAA4B;AAC9D,QAAMuB,OAAO,GAAG,CAAC,GAAGT,IAAJ,CAAhB;AACA,QAAMwB,IAAI,GAAGf,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAb;AACA,QAAM0C,OAAO,GAAG,EACd,GAAG1B,IADW;AACL;AACTC,IAAAA,QAAQ,EAAE,CAACD,IAAI,CAACC,QAFF;AAGdvC,IAAAA,MAAM,EAAEQ,QAAQ,CAACR,MAAD;AAHF,GAAhB;AAKAuB,EAAAA,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoB0C,OAApB;AACA,SAAOzC,OAAP;AACD,CAVD","sourcesContent":["import React, { Component } from \"react\";\n\nimport Node from \"./Node/Node.jsx\";\nimport {showPopUp} from \"./Tutorial/Tutorial.jsx\";\n\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\n\nimport \"./PathfindingVisualizer.css\";\n\n// Defining initial state of start and finish.\n\nlet row_max_length = 20;\nlet col_max_length = 40;\n\nlet START_NODE_ROW = 9;\nlet START_NODE_COL = 8;\nlet FINISH_NODE_ROW = 9;\nlet FINISH_NODE_COL = 31;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      topMessage: \"Dijkstra Algorithm\",\n      weight: 1,\n      changeWeight: false,\n      distanceToBeTraveled: 0,\n    };\n  }\n\n  // Creating grid\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  // On pressing the mouse down\n  handleMouseDown(row, col) {\n    if (this.state.topMessage !== \"Dijkstra Algorithm\") return;\n\n    let newGrid = [];\n\n    if (this.state.changeWeight) {\n      newGrid = getNewGridWithWeightToggled(\n        this.state.grid,\n        row,\n        col,\n        this.state.weight\n      );\n    } else {\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    }\n\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  // On entering the new node element.\n  handleMouseEnter(row, col) {\n    if (this.state.topMessage !== \"Dijkstra Algorithm\") return;\n    if (!this.state.mouseIsPressed) return;\n\n    let newGrid = [];\n\n    if (this.state.changeWeight) {\n      newGrid = getNewGridWithWeightToggled(\n        this.state.grid,\n        row,\n        col,\n        this.state.weight\n      );\n    } else {\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    }\n\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  // When we release the mouse\n  handleMouseUp() {\n    if (this.state.topMessage !== \"Dijkstra Algorithm\") return;\n    this.setState({ mouseIsPressed: false });\n  }\n\n  visualizeDijkstra() {\n    this.setState({ topMessage: \"Creator : Suhaan\" });\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      // When we reach the last element in visitedNodesInOrder.\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.setState({ topMessage: \"Shortest Path\" });\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      if (i === visitedNodesInOrder.length - 1) continue;\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        if (node.isWeight) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-visitedWeight\";\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-visited\";\n        }\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    let timeTaken = 0;\n    for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        if (nodesInShortestPathOrder[i].isWeight) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-path-weight\";\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-path\";\n        }\n      }, 50 * i);\n    }\n\n    timeTaken =\n      nodesInShortestPathOrder[nodesInShortestPathOrder.length - 1].distance;\n    this.setState({ distanceToBeTraveled: timeTaken });\n  }\n\n  // onClick={() => this.resetGrid()}\n  // resetGrid() {\n\n  //   const newGrid = getInitialGrid();\n\n  //   START_NODE_ROW = 0;\n  //   START_NODE_COL = 0;\n  //   FINISH_NODE_ROW = row_max_length - 1;\n  //   FINISH_NODE_COL = col_max_length - 1;\n\n  //   document.getElementById(\"start_row\").value = START_NODE_ROW;\n  //   document.getElementById(\"start_col\").value = START_NODE_COL;\n  //   document.getElementById(\"end_row\").value = FINISH_NODE_ROW;\n  //   document.getElementById(\"end_col\").value = FINISH_NODE_COL;\n\n  //   for (let row = 0; row < row_max_length; row++) {\n  //     for (let col = 0; col < col_max_length; col++) {\n  //       if (row === START_NODE_ROW && col === START_NODE_COL) {\n  //         document.getElementById(`node-${row}-${col}`).className =\n  //           \"node node-start\";\n  //       } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\n  //         document.getElementById(`node-${row}-${col}`).className =\n  //           \"node node-finish\";\n  //       } else {\n  //         document.getElementById(`node-${row}-${col}`).className = \"node\";\n  //       }\n  //     }\n  //   }\n  //   this.setState({ topMessage: \"Dijkstra Algorithm\" });\n\n  //   this.setState({ grid: newGrid });\n  // }\n\n  weightChangeHandler = (event) => {\n    this.setState({ weight: event.target.value });\n  };\n\n  pointChangeHandler = () => {\n    if (this.notCorrect()) return; //To check if the provided value is suitable or not.\n\n    document.getElementById(\n      `node-${START_NODE_ROW}-${START_NODE_COL}`\n    ).className = \"node\";\n    document.getElementById(\n      `node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`\n    ).className = \"node\";\n\n    START_NODE_ROW = parseInt(document.getElementById(\"start_row\").value);\n    START_NODE_COL = parseInt(document.getElementById(\"start_col\").value);\n    FINISH_NODE_ROW = parseInt(document.getElementById(\"end_row\").value);\n    FINISH_NODE_COL = parseInt(document.getElementById(\"end_col\").value);\n\n    document.getElementById(\n      `node-${START_NODE_ROW}-${START_NODE_COL}`\n    ).className = \"node node-start\";\n    document.getElementById(\n      `node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`\n    ).className = \"node node-finish\";\n  };\n\n  notCorrect = () => {\n    if (\n      isNaN(parseInt(document.getElementById(\"start_row\").value)) ||\n      isNaN(parseInt(document.getElementById(\"start_col\").value)) ||\n      isNaN(parseInt(document.getElementById(\"end_row\").value)) ||\n      isNaN(parseInt(document.getElementById(\"end_col\").value))\n    )\n      return true;\n\n    if (\n      parseInt(document.getElementById(\"start_row\").value) > row_max_length ||\n      parseInt(document.getElementById(\"start_col\").value) > col_max_length\n    )\n      return true;\n    if (\n      parseInt(document.getElementById(\"start_row\").value) < 0 ||\n      parseInt(document.getElementById(\"start_col\").value) < 0\n    )\n      return true;\n\n    if (\n      parseInt(document.getElementById(\"end_row\").value) > row_max_length ||\n      parseInt(document.getElementById(\"end_col\").value) > col_max_length\n    )\n      return true;\n    if (\n      parseInt(document.getElementById(\"end_row\").value) < 0 ||\n      parseInt(document.getElementById(\"end_col\").value) < 0\n    )\n      return true;\n\n    return false;\n  };\n\n  toggleWeight = () => {\n    const temp = this.state.changeWeight;\n    this.setState({ changeWeight: !temp });\n  };\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed,\n      topMessage,\n      distanceToBeTraveled,\n    } = this.state;\n    let button_task = (\n      <p className=\"btn\" onClick={() => this.visualizeDijkstra()}>\n        Start Dijkstra Algorithm\n      </p>\n    );\n\n    if (topMessage === \"Shortest Path\") {\n      button_task = (\n        <h2\n          className=\"btn\"\n          href=\"#\"\n          onClick={() => window.location.reload(false)}\n        >\n          Reset <br />\n          Time : {distanceToBeTraveled}\n          <small> [1 Block = 1 Time = 1 Weight]</small>\n        </h2>\n      );\n    } else if (topMessage === \"Creator : Suhaan\") {\n      button_task = <h3 className=\"running\">Running...</h3>;\n    }\n\n    let changeWeightText = \"False\";\n\n    if (this.state.changeWeight) changeWeightText = \"True\";\n\n    let textBox = (\n      <div className=\"textBox\">\n        <div className=\"weightContainer\">\n          <label htmlFor=\"quantity\">Toggle or Set Weight </label>\n\n          <input\n            type=\"number\"\n            id=\"quantity\"\n            name=\"quantity\"\n            min=\"1\"\n            max=\"5\"\n            onChange={this.weightChangeHandler}\n            defaultValue=\"1\"\n          />\n\n          <button onClick={this.toggleWeight}>{changeWeightText}</button>\n        </div>\n\n        <div className=\"startPointContainer\">\n          <label htmlFor=\"point\">Start Point :</label>\n          <input\n            type=\"number\"\n            name=\"point\"\n            id=\"start_row\"\n            min=\"0\"\n            max={row_max_length - 1}\n            onChange={this.pointChangeHandler}\n            defaultValue=\"9\"\n          ></input>\n          <input\n            type=\"number\"\n            name=\"point\"\n            id=\"start_col\"\n            min=\"0\"\n            max={col_max_length - 1}\n            onChange={this.pointChangeHandler}\n            defaultValue=\"8\"\n          ></input>\n        </div>\n\n        <div className=\"endPointContainer\">\n          <label htmlFor=\"point\">End Point :</label>\n          <input\n            type=\"number\"\n            name=\"point\"\n            id=\"end_row\"\n            min=\"0\"\n            max={row_max_length - 1}\n            onChange={this.pointChangeHandler}\n            defaultValue=\"9\"\n          ></input>\n          <input\n            type=\"number\"\n            name=\"point\"\n            id=\"end_col\"\n            min=\"0\"\n            max={col_max_length - 1}\n            onChange={this.pointChangeHandler}\n            defaultValue=\"31\"\n          ></input>\n        </div>\n\n        <div className=\"buttonContainer\">{button_task}</div>\n      </div>\n    );\n\n    if (topMessage === \"Creator : Suhaan\") {\n      textBox = null;\n    } else if (topMessage === \"Shortest Path\") {\n      textBox = (\n        <div\n          className=\"buttonContainer\"\n          style={{ width: \"30%\", margin: \"0 auto\" }}\n        >\n          {button_task}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"pathfindingVisualizer\">\n        <div className=\"container\">\n          <div className=\"heading\">\n            <h2 onClick={showPopUp}>Search Visualizer</h2>\n            <h2>{topMessage}</h2>\n          </div>\n\n          {/* Show the header */}\n          {textBox}\n\n          <p>\n            Dijkstra's Algorithm is weighted and guarantees the shortest path!{\" \"}\n            <span className=\"ref\"></span>\n          </p>\n        </div>\n\n        <div className=\"visualGridContainer\">\n          <div className=\"gridBox\">\n            <table className=\"grid\" style={{ borderSpacing: \"0\" }}>\n              <tbody>\n                {grid.map((row, rowIndex) => {\n                  return (\n                    <tr key={rowIndex}>\n                      {row.map((node, nodeIndex) => {\n                        const { isStart, isFinish, isWall, isWeight } = node; //Extracting from the node\n                        return (\n                          <Node\n                            row={rowIndex}\n                            col={nodeIndex}\n                            key={rowIndex + \"-\" + nodeIndex}\n                            isStart={isStart}\n                            isFinish={isFinish}\n                            isWall={isWall}\n                            isWeight={isWeight}\n                            mouseIsPressed={mouseIsPressed}\n                            onMouseDown={(row, col) =>\n                              this.handleMouseDown(row, col)\n                            }\n                            onMouseEnter={(row, col) =>\n                              this.handleMouseEnter(row, col)\n                            }\n                            onMouseUp={() => this.handleMouseUp()}\n                          ></Node>\n                        );\n                      })}\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < row_max_length; row++) {\n    const currentRow = [];\n    for (let col = 0; col < col_max_length; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    isWeight: false,\n    previousNode: null,\n    weight: 0,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = [...grid];\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node, // copying other properties of the node\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithWeightToggled = (grid, row, col, weight) => {\n  const newGrid = [...grid];\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node, // copying other properties of the node\n    isWeight: !node.isWeight,\n    weight: parseInt(weight),\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}